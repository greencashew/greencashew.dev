<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Jan Górkiewicz - Programmer Technical Blog</title><link>https://greencashew.github.io/categories/docker/</link><description>Recent content in Docker on Jan Górkiewicz - Programmer Technical Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 25 Dec 2020 18:51:20 +0100</lastBuildDate><atom:link href="https://greencashew.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>How to add Reverseshell to host from the privileged container</title><link>https://greencashew.github.io/posts/how-to-add-reverseshell-to-host-from-the-privileged-container/</link><pubDate>Fri, 25 Dec 2020 18:51:20 +0100</pubDate><guid>https://greencashew.github.io/posts/how-to-add-reverseshell-to-host-from-the-privileged-container/</guid><description>Overview Docker privileged mode grants a Docker container root capabilities to all devices on the host system. Some docker containers require extra privileges to access kernel host (e.g. to allow run docker inside docker). Unfortunately, these root capabilities can be also used to breakout container and even gain root capabilities.
Preconditions The attacker has access to the container with --privileged or --cap-add=all mode Checking capabilities First, to simulate the attacker situation let&amp;rsquo;s run the alpine image with --privileged mode.</description></item><item><title>Docker Container breakout using docker.sock</title><link>https://greencashew.github.io/posts/docker-container-breakout-using-docker.sock/</link><pubDate>Thu, 24 Dec 2020 18:51:20 +0100</pubDate><guid>https://greencashew.github.io/posts/docker-container-breakout-using-docker.sock/</guid><description>Overview Some docker images like Portainer, Nginx available on docker hub require add as volume docker.sock. This file allows managing other containers from the container. Unfortunately, access to this file can also give the attacker opportunity to get control over the host.
Preconditions The attacker got access to docker container Container has mounted /var/run/docker.sock Checking if conditions fulfilled To simulate precondition we create alpine image with mounted docker.sock:</description></item><item><title>Docker privilege escalation - Namespace Exploit</title><link>https://greencashew.github.io/posts/docker-privilege-escalation-namespace-exploit/</link><pubDate>Tue, 22 Dec 2020 18:51:20 +0100</pubDate><guid>https://greencashew.github.io/posts/docker-privilege-escalation-namespace-exploit/</guid><description>Overview Docker for proper running need root privileges. Following the Peter Parker quote &amp;quot;With great power comes great responsibility&amp;quot; we should focus on securing potential docker vulnerabilities. One of them is Privilege Escalation through Linux Namespace.
Preconditions Already logged user in the host User in the docker group userns-remap disabled Attack - User with docker group on the host machine In the beginning, it is required to check if we are added to docker user group, so we can run docker command.</description></item><item><title>How to swap an image in docker registry - with rigged image</title><link>https://greencashew.github.io/posts/how-to-swap-an-image-in-docker-registry-with-rigged-image/</link><pubDate>Mon, 21 Dec 2020 18:51:20 +0100</pubDate><guid>https://greencashew.github.io/posts/how-to-swap-an-image-in-docker-registry-with-rigged-image/</guid><description>Overview Docker registry mechanism allows to quick download images from the image repository. This makes the publish/pull processes much easier. Unfortunately, this great feature can open new possibilities to an attacker who can corrupt the image in the registry.
In this scenario, we assume that the attacker already got write access to the docker image repository (Like public one docker hub or steal developer&amp;rsquo;s/Jenkins&amp;rsquo;s credentials to the private docker registry)</description></item><item><title>Backdooring Docker images - Reverse shell</title><link>https://greencashew.github.io/posts/backdooring-docker-images-reverse-shell/</link><pubDate>Sat, 19 Dec 2020 18:51:20 +0100</pubDate><guid>https://greencashew.github.io/posts/backdooring-docker-images-reverse-shell/</guid><description>Overview Using trustworthy docker images is one of the most important parts of securing system. Easily, the attacker can prepare a docker image (by changing entrypoint, adding reverse shell or changing running user) and publish a malicious image on docker registry.
This section shows the way of trojanizing docker images by adding a reverse shell.
Precondition For the testing purpose, it is needed to have nmap installed:
sudo apt update sudo apt install -y nmap The next step to be done is the dockerscan installation.</description></item></channel></rss>